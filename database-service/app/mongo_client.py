from pymongo import MongoClient
import json

class MongoMovieClient:
    def __init__(self, host="mongodb://mongodb:27017", db_name="movies_db", collection_name="movies"):
        """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB"""
        self.client = MongoClient(host)
        self.db = self.client[db_name]
        self.collection = self.db[collection_name]

    def clear_and_load_movies(self, json_path):
        """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å–º—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üìÇ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª {json_path}...")
        with open(json_path, "r", encoding="utf-8") as f:
            movies_data = json.load(f)
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(movies_data)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

        print("üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ MongoDB...")
        self.collection.delete_many({})  # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å MongoDB
        movies_list = []
        seen_ids = set()
        total_movies = sum(len(movies) for movies in movies_data.values())
        print(f"üìä –í—Å–µ–≥–æ —Ñ–∏–ª—å–º–æ–≤ –≤ JSON: {total_movies}")

        for category, movies in movies_data.items():
            print(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' ({len(movies)} —Ñ–∏–ª—å–º–æ–≤)...")
            for movie in movies:
                movie_id = movie.get("id")

                if not isinstance(movie_id, int):
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∏–ª—å–º –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID: {movie}")
                    continue
                if movie_id in seen_ids:
                    print(f"‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç ID: {movie_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    continue

                seen_ids.add(movie_id)

                release_years = movie.get("releaseYears", [])
                release_year = release_years[0]["start"] if release_years and isinstance(release_years[0], dict) else movie.get("year", 2000)
                poster = movie.get("poster") or {}  # –ï—Å–ª–∏ poster = None, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

                normalized_movie = {
                    "_id": movie_id,
                    "name": movie.get("name", ""),
                    "type": movie.get("type", ""),
                    "year": movie.get("year", 2000),
                    "description": movie.get("description", "") or "",
                    "shortDescription": movie.get("shortDescription", "") or "",
                    "status": movie.get("status", ""),
                    "rating": movie.get("rating", {}).get("kp", 0.0),
                    "ageRating": movie.get("ageRating"),
                    "poster": poster.get("url", ""),
                    "genres": [g["name"].lower() for g in movie.get("genres", []) if isinstance(g, dict)],
                    "countries": [c["name"] for c in movie.get("countries", []) if isinstance(c, dict)],
                    "releaseYear": release_year,
                    "isSeries": movie.get("isSeries", False),
                    "category": category,
                }

                movies_list.append(normalized_movie)

        if movies_list:
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(movies_list)} —Ñ–∏–ª—å–º–æ–≤ –≤ MongoDB...")
            self.collection.insert_many(movies_list)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(movies_list)} —Ñ–∏–ª—å–º–æ–≤ –≤ MongoDB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ
            actual_count = self.collection.count_documents({})
            print(f"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –≤ MongoDB: {actual_count}")
        else:
            print("‚ö†Ô∏è –í MongoDB –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞! –ü—Ä–æ–≤–µ—Ä—å JSON-—Ñ–∞–π–ª.")

    def get_movie_by_id(self, movie_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–ª—å–º –ø–æ ID"""
        return self.collection.find_one({"_id": movie_id}, {"_id": 0})

    def get_movies(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å–º—ã (—Å ID)"""
        return list(self.collection.find({}))

    def get_all_genres(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é MongoDB –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤
            pipeline = [
                {"$unwind": "$genres"},  # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∂–∞–Ω—Ä–æ–≤
                {"$group": {"_id": "$genres"}},  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º
                {"$sort": {"_id": 1}}  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            ]
            
            genres = [doc["_id"].capitalize() for doc in self.collection.aggregate(pipeline)]
            return genres
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–∞–Ω—Ä–æ–≤ –∏–∑ MongoDB: {e}")
            return []

    def clear_db(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.collection.delete_many({})
        print("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞") 