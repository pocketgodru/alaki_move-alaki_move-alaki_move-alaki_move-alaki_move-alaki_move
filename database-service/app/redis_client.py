from redis import Redis
import time
import json
from functools import wraps

def redis_error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Redis"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Redis –≤ {func.__name__}: {str(e)}")
            import traceback
            print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return None
    return wrapper

class RedisMovieClient:
    def __init__(self, host="localhost", port=6379, db=0, auto_load_from_mongo=False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Redis."""
        try:
            print(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –Ω–∞ {host}:{port}...")
            self.redis_client = Redis(host=host, port=port, db=db, decode_responses=True)
            
            # –ñ–¥–µ–º, –ø–æ–∫–∞ Redis –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
            max_retries = 30
            retry_interval = 2
            for attempt in range(max_retries):
                try:
                    if self.redis_client.ping():
                        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                        break
                except Exception as e:
                    if "loading" in str(e).lower():
                        print(f"‚è≥ Redis –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                        time.sleep(retry_interval)
                        continue
                    raise
            else:
                raise Exception("Redis –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ
            movie_count = len(self.redis_client.keys("movie:*") or [])
            print(f"üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {movie_count} —Ñ–∏–ª—å–º–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–∞ RediSearch
            self._ensure_search_index()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if auto_load_from_mongo and movie_count == 0:
                from mongo_client import MongoMovieClient
                mongo_client = MongoMovieClient()
                self.load_from_mongodb(mongo_client)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {str(e)}")
            import traceback
            print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            self.redis_client = None

    @redis_error_handler
    def _ensure_search_index(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–∞ RediSearch –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å
            index_exists = False
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–µ
                self.redis_client.execute_command("FT.INFO", "movie_idx")
                index_exists = True
                print("‚úÖ –ò–Ω–¥–µ–∫—Å RediSearch —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception:
                # –ò–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                index_exists = False
                print("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å RediSearch –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")

            # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not index_exists:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                try:
                    self.redis_client.execute_command("FT.DROPINDEX", "movie_idx")
                except Exception:
                    pass

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
                # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—è: name, description, shortDescription
                # –ü—Ä–µ—Ñ–∏–∫—Å movie: —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å movie:
                create_index_cmd = [
                    "FT.CREATE", "movie_idx", "ON", "HASH", "PREFIX", "1", "movie:",
                    "SCHEMA",
                    "name", "TEXT", "WEIGHT", "5.0",
                    "description", "TEXT", "WEIGHT", "1.0",
                    "shortDescription", "TEXT", "WEIGHT", "2.0"
                ]
                self.redis_client.execute_command(*create_index_cmd)
                print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å RediSearch –¥–ª—è —Ñ–∏–ª—å–º–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ RediSearch: {str(e)}")
            raise

    @redis_error_handler
    def save_movie(self, movie):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–∏–Ω —Ñ–∏–ª—å–º –≤ Redis."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∏–ª—å–º–∞
        movie_id = None
        if "id" in movie:
            movie_id = movie["id"]
        elif "_id" in movie:
            movie_id = movie["_id"]
            
        if movie_id is None:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∏–ª—å–º –±–µ–∑ ID: {movie}")
            return False
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "movie:"
        redis_id = f"movie:{movie_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∏–ª—å–º–∞ –¥–ª—è Redis
        redis_movie = self._prepare_movie_for_redis(movie)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ Redis
        self.redis_client.hset(redis_id, mapping=redis_movie)
        
        print(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∏–ª—å–º –≤ Redis: {redis_id} -> {redis_movie.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        return True

    @redis_error_handler
    def save_movies_bulk(self, movies_list):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ Redis."""
        if not self.redis_client:
            print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return 0
            
        if not movies_list:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤")
            return 0
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redis –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            info = self.redis_client.info()
            if info.get('loading', 0) == 1:
                print("‚ö†Ô∏è Redis –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å, –æ–∂–∏–¥–∞–µ–º...")
                # –ñ–¥–µ–º –ø–æ–∫–∞ Redis –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
                for _ in range(30):  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
                    time.sleep(1)
                    info = self.redis_client.info()
                    if info.get('loading', 0) == 0:
                        print("‚úÖ Redis –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                        break
                else:
                    raise Exception("Redis —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ")
            
            print(f"üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(movies_list)} —Ñ–∏–ª—å–º–æ–≤ –≤ Redis...")
            pipeline = self.redis_client.pipeline(transaction=False)  # –û—Ç–∫–ª—é—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            saved_count = 0

            for i, movie in enumerate(movies_list, 1):
                # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∏–ª—å–º–∞
                movie_id = None
                if "id" in movie:
                    movie_id = movie["id"]
                elif "_id" in movie:
                    movie_id = movie["_id"]
                    
                if movie_id is None:
                    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∏–ª—å–º –±–µ–∑ ID: {movie}")
                    continue

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "movie:"
                redis_id = f"movie:{movie_id}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∏–ª—å–º–∞ –¥–ª—è Redis
                redis_movie = self._prepare_movie_for_redis(movie)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ Redis
                pipeline.hset(redis_id, mapping=redis_movie)
                
                saved_count += 1
                if i % 1000 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é 1000 —Ñ–∏–ª—å–º–æ–≤
                    print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(movies_list)} —Ñ–∏–ª—å–º–æ–≤...")
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                    pipeline.execute()
                    pipeline = self.redis_client.pipeline(transaction=False)
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–º–∞–Ω–¥—ã –≤ pipeline
            if saved_count % 1000 != 0:
                print("üíæ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Redis...")
                pipeline.execute()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –≤ Redis
            actual_count = len(self.redis_client.keys("movie:*"))
            print(f"üìä –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –≤ Redis: {actual_count}")
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_count} —Ñ–∏–ª—å–º–æ–≤ –≤ Redis!")
            return saved_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–æ–≤ –≤ Redis: {str(e)}")
            import traceback
            print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return 0

    def _prepare_movie_for_redis(self, movie):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis."""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∏–ª—å–º–∞ –¥–ª—è Redis
        redis_movie = {}
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        redis_movie["name"] = str(movie.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–æ–≤
        genres = movie.get("genres", [])
        if genres is None:
            genres = []
        if isinstance(genres, list):
            redis_movie["genres"] = "|".join([str(g) for g in genres if g])
        else:
            redis_movie["genres"] = str(genres)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞
        year = movie.get("year", 2000)
        if year is None:
            year = 2000
        redis_movie["year"] = str(year)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞
        movie_type = movie.get("type", "movie")
        if movie_type is None:
            movie_type = "movie"
        redis_movie["type"] = str(movie_type)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π
        description = movie.get("description", "")
        if description is None:
            description = ""
        redis_movie["description"] = str(description)
        
        short_description = movie.get("shortDescription", "")
        if short_description is None:
            short_description = ""
        redis_movie["shortDescription"] = str(short_description)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating = movie.get("rating", 0)
        try:
            rating = float(rating)
        except (ValueError, TypeError):
            rating = 0
        redis_movie["rating"] = str(rating)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–µ—Ä–∞
        poster = movie.get("poster", "")
        if poster is None:
            poster = ""
        redis_movie["poster"] = str(poster)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        status = movie.get("status", "")
        if status is None:
            status = ""
        redis_movie["status"] = str(status)
        
        age_rating = movie.get("ageRating", "")
        if age_rating is None:
            age_rating = ""
        redis_movie["ageRating"] = str(age_rating)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω
        countries = movie.get("countries", [])
        if countries is None:
            countries = []
        if isinstance(countries, list):
            redis_movie["countries"] = "|".join([str(c) for c in countries if c])
        else:
            redis_movie["countries"] = str(countries)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ releaseYear
        release_year = movie.get("releaseYear", year)
        if release_year is None:
            release_year = year
        redis_movie["releaseYear"] = str(release_year)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ isSeries
        is_series = movie.get("isSeries", False)
        if is_series is None:
            is_series = False
        redis_movie["isSeries"] = "1" if is_series else "0"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = movie.get("category", "")
        if category is None:
            category = ""
        redis_movie["category"] = str(category)
        
        return redis_movie

    @redis_error_handler
    def search_movies(self, query="", genre=None, year=None, movie_type=None, country=None, category=None):
        """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ Redis"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ Redis:")
            print(f"  –ó–∞–ø—Ä–æ—Å: {query}")
            print(f"  –ñ–∞–Ω—Ä: {genre}")
            print(f"  –ì–æ–¥: {year}")
            print(f"  –¢–∏–ø: {movie_type}")
            print(f"  –°—Ç—Ä–∞–Ω–∞: {country}")
            print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_query = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å
            if query and len(query.strip()) > 0:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–ø—Ä–æ—Å–µ
                escaped_query = query.replace('"', '\\"').strip()
                search_query.append(f'(@name:"{escaped_query}"*)')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
            if genre and len(genre.strip()) > 0:
                search_query.append(f'(@genres:{{{genre.lower()}}})')
            
            if year and str(year).strip():
                search_query.append(f'(@year:[{year} {year}])')
                
            if movie_type and len(movie_type.strip()) > 0:
                search_query.append(f'(@type:"{movie_type}")')
                
            if country and len(country.strip()) > 0:
                search_query.append(f'(@countries:{{{country}}})')
                
            if category and len(category.strip()) > 0:
                search_query.append(f'(@category:"{category}")')

            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not search_query:
                print("‚ùå –ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
                return []

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è —á–µ—Ä–µ–∑ AND
            final_query = " & ".join(search_query)
            print(f"üìù –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Redis: {final_query}")

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            try:
                results = self.redis_client.ft("movies_idx").search(final_query)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results.total}")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                movies = []
                for doc in results.docs:
                    movie_data = {k: v for k, v in doc.__dict__.items() if not k.startswith('__')}
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
                    movie_data.pop('id', None)
                    movie_data.pop('payload', None)
                    movies.append(movie_data)
                
                return movies
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")
                return []

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ search_movies: {str(e)}")
            return []

    @redis_error_handler
    def get_movie_by_id(self, movie_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–ª—å–º –ø–æ ID."""
        if not self.redis_client:
            return None
            
        redis_id = f"movie:{movie_id}"
        movie_data = self.redis_client.hgetall(redis_id)
        
        if not movie_data:
            return None
            
        return movie_data

    @redis_error_handler
    def get_all_genres(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤."""
        if not self.redis_client:
            return []
            
        genres_set = set()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã
        for key in self.redis_client.scan_iter("movie:*"):
            movie_genres = self.redis_client.hget(key, "genres")
            if movie_genres:
                genres_set.update(movie_genres.split("|"))
                
        return sorted(list(genres_set))

    @redis_error_handler
    def get_all_countries(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω."""
        if not self.redis_client:
            return []
            
        countries_set = set()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã
        for key in self.redis_client.scan_iter("movie:*"):
            movie_countries = self.redis_client.hget(key, "countries")
            if movie_countries:
                countries_set.update(movie_countries.split("|"))
                
        return sorted(list(countries_set))

    @redis_error_handler
    def get_all_categories(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        if not self.redis_client:
            return []
            
        categories_set = set()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã
        for key in self.redis_client.scan_iter("movie:*"):
            category = self.redis_client.hget(key, "category")
            if category:
                categories_set.add(category)
                
        return sorted(list(categories_set))

    @redis_error_handler
    def flush_db(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Redis."""
        if not self.redis_client:
            return False
            
        self.redis_client.flushdb()
        print("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Redis –æ—á–∏—â–µ–Ω–∞")
        return True

    @redis_error_handler
    def load_from_mongodb(self, mongo_client):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å–º—ã –∏–∑ MongoDB –≤ Redis."""
        if not self.redis_client:
            print("‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        try:
            print("üì• –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –∏–∑ MongoDB...")
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã –∏–∑ MongoDB
            movies = mongo_client.get_movies()
            
            if not movies:
                print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ MongoDB")
                return False
                
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(movies)} —Ñ–∏–ª—å–º–æ–≤ –≤ MongoDB")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
            if not self.redis_client.ping():
                print("‚ùå Redis –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping")
                return False
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ Redis
            print("üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ Redis...")
            self.flush_db()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º—ã –≤ Redis
            saved_count = self.save_movies_bulk(movies)
            
            if saved_count > 0:
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_count} —Ñ–∏–ª—å–º–æ–≤ –∏–∑ MongoDB –≤ Redis")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å–º—ã –≤ Redis")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ Redis: {str(e)}")
            import traceback
            print(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")
            return False 