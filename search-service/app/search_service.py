from flask import Flask, jsonify, request
from turbo_search import TurboMovieSearch
import os
from dotenv import load_dotenv
import requests

load_dotenv()

app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
search_engine = TurboMovieSearch(
    mongo_host=os.getenv("MONGO_URI", "mongodb://mongodb:27017"),
    mongo_db=os.getenv("MONGO_DB", "movies_db"),
    mongo_collection=os.getenv("MONGO_COLLECTION", "movies")
)

@app.route("/health")
def health_check():
    return jsonify({"status": "healthy"})

@app.route("/search")
def search():
    query = request.args.get("query", "")
    year = request.args.get("year")
    genre = request.args.get("genre")
    top_k = int(request.args.get("top_k", 10))
    search_mode = request.args.get("search_mode", "semantic")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_service_url = os.getenv("DATABASE_SERVICE_URL", "http://database:5001")
        print(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query} (—Ä–µ–∂–∏–º: {search_mode})")
        
        if search_mode == "redis":
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ Redis
            params = {
                "query": query,
                "year": year if year else "",
                "genre": genre if genre else "",
                "type": request.args.get("type", ""),
                "country": request.args.get("country", ""),
                "category": request.args.get("category", "")
            }
            
            print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Redis: {params}")
            try:
                response = requests.get(f"{db_service_url}/movies/search", params=params, timeout=10)
                print(f"üì• –û—Ç–≤–µ—Ç –æ—Ç Redis: {response.status_code}")
                
                if response.status_code == 200:
                    results = response.json()
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                    return jsonify(results)
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ Redis: {response.status_code}")
                    print(f"–û—Ç–≤–µ—Ç: {response.text}")
                    return jsonify([])
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Redis: {str(e)}")
                return jsonify([])
        else:
            # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ FAISS
            try:
                results = search_engine.search(
                    query=query,
                    top_k=top_k,
                    year_filter=year,
                    genre_filter=genre
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏–ª—å–º–∞—Ö
                movies = []
                for result in results:
                    movie_id = result.get("id")
                    if movie_id:
                        try:
                            response = requests.get(f"{db_service_url}/movies/{movie_id}")
                            if response.status_code == 200:
                                movie_data = response.json()
                                movie_data["relevance_score"] = result.get("relevance_score", 0)
                                movies.append(movie_data)
                        except requests.exceptions.RequestException as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞ {movie_id}: {str(e)}")
                            continue
                    else:
                        # –ï—Å–ª–∏ ID –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
                        movies.append(result)
                
                return jsonify(movies)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–∏—Å–∫–µ: {str(e)}")
                return jsonify([])
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        return jsonify([])

@app.route("/movie/<movie_id>")
def get_movie(movie_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ"""
    try:
        db_service_url = os.getenv("DATABASE_SERVICE_URL", "http://database:5001")
        print(f"üé¨ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ: {movie_id}")
        
        response = requests.get(f"{db_service_url}/movies/{movie_id}", timeout=10)
        print(f"üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ë–î: {response.status_code}")
        
        if response.status_code == 200:
            movie_data = response.json()
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –ø–æ–ª—É—á–µ–Ω—ã")
            return jsonify(movie_data)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return jsonify({"error": "–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–∏—Å—É –ë–î: {str(e)}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞"}), 500
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route("/like_movie", methods=["POST"])
def like_movie():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∞–π–∫–∞ –∫ —Ñ–∏–ª—å–º—É"""
    try:
        data = request.json
        if not data or "movie_id" not in data:
            return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω ID —Ñ–∏–ª—å–º–∞"}), 400
            
        db_service_url = os.getenv("DATABASE_SERVICE_URL", "http://database:5001")
        print(f"üëç –ó–∞–ø—Ä–æ—Å –Ω–∞ –ª–∞–π–∫ —Ñ–∏–ª—å–º–∞: {data}")
        
        response = requests.post(f"{db_service_url}/movies/like", json=data, timeout=10)
        print(f"üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ë–î: {response.status_code}")
        
        if response.status_code == 200:
            return jsonify(response.json())
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–∞–π–∫"}), response.status_code
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–∏—Å—É –ë–î: {str(e)}")
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞"}), 500
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.route("/update_index", methods=["POST"])
def update_index():
    try:
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB
        search_engine.metadata = search_engine._load_metadata()
        search_engine.movie_count = len(search_engine.metadata)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
        search_engine._precompute_features()
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        search_engine.search_cache.clear()
        search_engine.cache_hits = 0
        search_engine.total_searches = 0
        
        return jsonify({"status": "success", "message": "–ò–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5002) 